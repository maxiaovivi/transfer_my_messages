  *pose_estimate = transform::Rigid2d(
      {ceres_pose_estimate[0], ceres_pose_estimate[1]}, ceres_pose_estimate[2]);

  ceres::Covariance::Options options;
  ceres::Covariance covariance_computer(options);
  std::vector<std::pair<const double*, const double*>> covariance_blocks;
  covariance_blocks.emplace_back(ceres_pose_estimate, ceres_pose_estimate);
  CHECK(covariance_computer.Compute(covariance_blocks, &problem));
  double ceres_covariance[3 * 3];
  covariance_computer.GetCovarianceBlock(ceres_pose_estimate,
                                         ceres_pose_estimate, ceres_covariance);
  *covariance = Eigen::Map<kalman_filter::Pose2DCovariance>(ceres_covariance);
  *covariance *= options_.covariance_scale();