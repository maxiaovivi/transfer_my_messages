#include <zlib.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <cstring>

// 压缩数据
std::vector<char> compressData(const std::vector<char>& data) {
    uLongf compressedSize = compressBound(data.size());
    std::vector<char> compressedData(compressedSize);
    if (compress(reinterpret_cast<Bytef*>(compressedData.data()), &compressedSize, 
                 reinterpret_cast<const Bytef*>(data.data()), data.size()) != Z_OK) {
        throw std::runtime_error("Failed to compress data.");
    }
    compressedData.resize(compressedSize);
    return compressedData;
}

// 解压缩数据
std::vector<char> decompressData(const std::vector<char>& compressedData, uLong originalSize) {
    std::vector<char> decompressedData(originalSize);
    uLongf decompressedSize = originalSize;
    if (uncompress(reinterpret_cast<Bytef*>(decompressedData.data()), &decompressedSize, 
                   reinterpret_cast<const Bytef*>(compressedData.data()), compressedData.size()) != Z_OK) {
        throw std::runtime_error("Failed to decompress data.");
    }
    return decompressedData;
}

int main() {
    // 假设 originalData 是要压缩的数据
    std::vector<char> originalData;  // 这里应填入实际数据
    // 压缩数据
    std::vector<char> compressedData = compressData(originalData);
    std::cout << "Original Size: " << originalData.size() << " Compressed Size: " << compressedData.size() << std::endl;

    // 解压缩数据
    std::vector<char> decompressedData = decompressData(compressedData, originalData.size());
    std::cout << "Decompressed Size: " << decompressedData.size() << std::endl;

    return 0;
}
