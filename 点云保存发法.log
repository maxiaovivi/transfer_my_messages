#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <fstream>
#include <iostream>

typedef pcl::PointCloud<pcl::PointXYZI> PointCloud;

void savePointCloud(const PointCloud::Ptr& cloud, const std::string& filename) {
    std::ofstream outFile(filename, std::ios::binary);
    for (const auto& point : *cloud) {
        outFile.write(reinterpret_cast<const char*>(&point.x), sizeof(float));
        outFile.write(reinterpret_cast<const char*>(&point.y), sizeof(float));
        outFile.write(reinterpret_cast<const char*>(&point.z), sizeof(float));
        outFile.write(reinterpret_cast<const char*>(&point.intensity), sizeof(float));
    }
    outFile.close();
}

void loadPointCloud(PointCloud::Ptr& cloud, const std::string& filename) {
    std::ifstream inFile(filename, std::ios::binary);
    pcl::PointXYZI point;
    while (inFile.read(reinterpret_cast<char*>(&point.x), sizeof(float))
        && inFile.read(reinterpret_cast<char*>(&point.y), sizeof(float))
        && inFile.read(reinterpret_cast<char*>(&point.z), sizeof(float))
        && inFile.read(reinterpret_cast<char*>(&point.intensity), sizeof(float))) {
        cloud->push_back(point);
    }
    inFile.close();
}

int main() {
    // Create a new PointCloud
    PointCloud::Ptr cloud(new PointCloud);

    // Add some points
    pcl::PointXYZI point;
    point.x = 1.0; point.y = 2.0; point.z = 3.0; point.intensity = 0.5;
    cloud->push_back(point);
    point.x = 4.0; point.y = 5.0; point.z = 6.0; point.intensity = 1.0;
    cloud->push_back(point);

    // Save to file
    savePointCloud(cloud, "pointcloud.bin");

    // Load from file
    PointCloud::Ptr loadedCloud(new PointCloud);
    loadPointCloud(loadedCloud, "pointcloud.bin");

    // Display loaded points
    for (const auto& pt : *loadedCloud) {
        std::cout << "Point: (" << pt.x << ", " << pt.y << ", " << pt.z << ") Intensity: " << pt.intensity << std::endl;
    }

    return 0;
}
